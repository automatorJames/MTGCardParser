@page "/span-trees"
@inject IJSRuntime JSRuntime
@inject RuntimeSettings RuntimeSettings
@inject CorpusAnalyzer CorpusAnalyzer
@implements IAsyncDisposable

@if (GetFilteredSpans() is var filteredSpans && !filteredSpans.Any())
{
    <p>No spans found that meet criteria.</p>
}
else
{
    <div class="span-trees-container">
        @foreach (var (span, index) in filteredSpans.Select((value, i) => (value, i)))
        {
            <div class="span-trees-card">
                <div class="card-header">
                    <div class="header-main-info">
                        <span class="header-span-text" title="@span.Text">@span.Text</span>
                        <span class="header-stat">Occurrences: @span.MaximalSpanOccurrenceCount</span>
                        <span class="header-stat">Word Count: @span.WordCount</span>
                    </div>
                    <div class="header-card-names">
                        @for (int i = 0; i < span.ContainingCards.Length; i++)
                        {
                            var cardName = span.ContainingCards[i];
                            var cardPalette = span.PositionalPalette[i];
                            <span class="card-name-item"
                                  data-card-name=@cardName
                                  style=@($"border-color: {cardPalette.Hex}; --highlight-color: {cardPalette.HexLight};")>
                                @cardName
                            </span>
                        }
                    </div>
                </div>
                <div class="word-tree-body">
                    <div id="@($"spinner-{index}")" class="spinner"></div>
                    <div id="@($"word-tree-container-{index}")"></div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<AnalyzedSpan> _currentSpans = new();

    protected override void OnInitialized()
    {
        RuntimeSettings.OnChanged += OnSettingsChanged;
    }

    private async void OnSettingsChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var spansToRender = GetFilteredSpans().ToList();

        if (!firstRender && _currentSpans.SequenceEqual(spansToRender))
            return;

        _currentSpans = spansToRender;

        // 1. Call the fast JS function to clear old SVGs and show spinners.
        //    This also cleans up any observers for cards that no longer exist.
        await JSRuntime.InvokeVoidAsync("clearAllTreesAndShowSpinners", spansToRender.Count);

        // 2. Yield control to Blazor's renderer. This is the key step.
        //    It allows the browser to process the DOM changes from the previous call and paint the spinners.
        await Task.Yield();

        // 3. If there's anything to render, call the function that does the heavy lifting.
        if (spansToRender.Any())
        {
            await JSRuntime.InvokeVoidAsync("renderAllTrees", spansToRender);
        }
    }

    private IEnumerable<AnalyzedSpan> GetFilteredSpans()
    {
        DigestedSpanCorpus corpus = RuntimeSettings.ShowOriginalText
            ? CorpusAnalyzer.OriginalDigestedCorpus
            : CorpusAnalyzer.UnmatchedDigestedCorpus;

        var items = corpus.Spans
            .Where(x =>
                x.MaximalSpanOccurrenceCount >= RuntimeSettings.MinSpanOccurences &&
                x.WordCount >= RuntimeSettings.MinSpanWords);

        return RuntimeSettings.OrderByWordCount
            ? items.OrderByDescending(x => x.WordCount)
            : items.OrderByDescending(x => x.MaximalSpanOccurrenceCount);
    }

    public async ValueTask DisposeAsync()
    {
        RuntimeSettings.OnChanged -= OnSettingsChanged;
        try
        {
            // Clean up everything by telling JS to clear 0 trees, which will
            // trigger the cleanup logic for all existing observers.
            await JSRuntime.InvokeVoidAsync("clearAllTreesAndShowSpinners", 0);
        }
        catch (JSDisconnectedException)
        {
            // ignore if nav away
        }
    }
}