@page "/span-trees"
@inject IJSRuntime JSRuntime
@inject RuntimeSettings RuntimeSettings
@inject CorpusAnalyzer CorpusAnalyzer
@implements IAsyncDisposable

@* Only render the body of the page after settings are loaded to avoid incorrect filtering *@
@if (RuntimeSettings.IsLoaded)
{
    var filteredSpans = GetFilteredSpans().ToList();
    if (!filteredSpans.Any())
    {
        <p>No spans found that meet criteria.</p>
    }
    else
    {
        <div class="span-trees-container">
            @foreach (var (span, index) in filteredSpans.Select((value, i) => (value, i)))
            {
                <div class="span-trees-card">
                    <div class="card-header">
                        <div class="header-main-info">
                            <span class="header-span-text" title="@span.Text">@span.Text</span>
                            <span class="header-stat">Occurrences: @span.MaximalSpanOccurrenceCount</span>
                            <span class="header-stat">Word Count: @span.WordCount</span>
                        </div>
                        <div class="header-card-names">
                            @foreach (var cardName in span.ContainingCards)
                            {
                                var cardPalette = span.CardPalettes[cardName];
                                <span class="card-name-item"
                                      data-card-name="@cardName"
                                      style="border-color: @cardPalette.Hex; --highlight-color: @cardPalette.HexLight; --sat-color: @cardPalette.HexSat;">
                                    @cardName
                                </span>
                            }
                        </div>
                        @{
                            var distinctTypes = span.DistinctSeedPalettes;
                            if (distinctTypes.Any())
                            {
                                <div class="header-type-names">
                                    @foreach (var typePalette in distinctTypes)
                                    {
                                        <span class="type-name-item"
                                              data-type-seed="@typePalette.Seed"
                                              style="color: @typePalette.HexLight; border-color: @typePalette.Hex; --highlight-color: @typePalette.Hex;">
                                            @typePalette.Seed
                                        </span>
                                    }
                                </div>
                            }
                        }
                    </div>
                    <div class="word-tree-body">
                        <div id="@($"spinner-{index}")" class="spinner"></div>
                        <div id="@($"word-tree-container-{index}")"></div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <p><em>Loading settings...</em></p>
}


@code {
    private List<AnalyzedSpan> _currentSpans = new();

    protected override void OnInitialized()
    {
        RuntimeSettings.OnChanged += OnSettingsChanged;
    }

    private async void OnSettingsChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // The call to RuntimeSettings.EnsureLoadedAsync() has been removed from here
        // as it is now handled globally and correctly by MainLayout.razor.

        // Only proceed with JS interop if the settings are loaded and the UI is ready.
        if (!RuntimeSettings.IsLoaded)
        {
            return;
        }

        var spansToRender = GetFilteredSpans().ToList();

        if (!firstRender && _currentSpans.SequenceEqual(spansToRender))
            return;

        _currentSpans = spansToRender;

        await JSRuntime.InvokeVoidAsync("clearAllTreesAndShowSpinners", spansToRender.Count);
        await Task.Yield();

        if (spansToRender.Any())
        {
            await JSRuntime.InvokeVoidAsync("renderAllTrees", spansToRender);
        }
    }

    private IEnumerable<AnalyzedSpan> GetFilteredSpans()
    {
        DigestedSpanCorpus corpus = RuntimeSettings.ShowOriginalText
            ? CorpusAnalyzer.OriginalDigestedCorpus
            : CorpusAnalyzer.UnmatchedDigestedCorpus;

        var items = corpus.Spans
            .Where(x =>
                x.MaximalSpanOccurrenceCount >= RuntimeSettings.MinSpanOccurences &&
                x.WordCount >= RuntimeSettings.MinSpanWords);

        return RuntimeSettings.OrderByWordCount
            ? items.OrderByDescending(x => x.WordCount)
            : items.OrderByDescending(x => x.MaximalSpanOccurrenceCount);
    }

    public async ValueTask DisposeAsync()
    {
        RuntimeSettings.OnChanged -= OnSettingsChanged;
        try
        {
            await JSRuntime.InvokeVoidAsync("clearAllTreesAndShowSpinners", 0);
        }
        catch (JSDisconnectedException)
        {
            // ignore if nav away
        }
    }
}