@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<CustomDialog OnBackdropClick="HandleCancel">
    <DialogContent>
        <div style="display:flex; align-items:baseline;">
            <span style="color: #A0AEC0; font-weight: 500; font-size: 28px; margin-bottom: 12px;">
                @Line.Card.Name
            </span>
            <span class="small-box-label">@($"Line #{Line.LineIndex + 1}")</span>
        </div>
        <div style="display: flex; flex-direction: column; gap: 16px;">

            <div class="line-text-container">
                <!-- The back layer is now the single child that controls height. -->
                <div class="text-layer-back">
                    @{
                        int cursor = 0;
                        foreach (var match in _currentMatches.OrderBy(m => m.Index))
                        {
                            if (match.Index > cursor)
                            {
                                @Line.SourceText.Substring(cursor, match.Index - cursor)
                            }
                            <span class="highlight-token">@match.Value</span>
                            cursor = match.Index + match.Length;
                        }
                        if (cursor < Line.SourceText.Length)
                        {
                            @Line.SourceText.Substring(cursor)
                        }
                    }

                    <!-- The colored text layer is now NESTED inside the back layer. -->
                    <div class="text-layer-front">
                        @{
                            cursor = 0;
                            foreach (var token in Line.SourceTokens.OrderBy(t => t.Span.Position.Absolute))
                            {
                                if (token.Span.Position.Absolute > cursor)
                                {
                                    @Line.SourceText.Substring(cursor, token.Span.Position.Absolute - cursor)
                                }
                                var tokenText = Line.SourceText.Substring(token.Span.Position.Absolute, token.Span.Length);
                                var color = token.Kind == typeof(DefaultUnmatchedString) ? "lightgray" : TokenTypeRegistry.Palettes[token.Kind].HexLight;
                                <span style=@($"color: {color}")>@tokenText</span>
                                cursor = token.Span.Position.Absolute + token.Span.Length;
                            }
                            if (cursor < Line.SourceText.Length)
                            {
                                @Line.SourceText.Substring(cursor)
                            }
                        }
                    </div>
                </div>
            </div>

            <div>

                <div class="autocomplete-container">
                    <label for="regex-input-field">Regular expression template</label>
                    <div @ref="_editorElement"
                         id="regex-input-field"
                         class="regex-input-composite form-control"
                         contenteditable="true"
                         spellcheck="false"
                         @onkeydown="OnKeyDown"
                         @onkeydown:preventDefault="_isDropdownVisible"
                         placeholder="@(_isEditorEmpty ? "Type text or @ to see templates" : "")">
                    </div>

                    @if (_isDropdownVisible)
                    {
                        <div id="autocomplete-dropdown-list" class="autocomplete-dropdown">
                            @foreach (var (suggestedType, index) in _autocompleteSuggestions.Select((s, i) => (s, i)))
                            {
                                <div id="@($"autocomplete-item-{index}")"
                                     class="autocomplete-item @(index == _selectedSuggestionIndex ? "selected" : "")"
                                     data-display-text="@suggestedType.Name"
                                     data-raw-text="@($"@{suggestedType.Name}")"
                                     data-color="@(TokenTypeRegistry.Palettes[suggestedType].HexDark)">
                                    <span class="type-name" style=@($"color: {TokenTypeRegistry.Palettes[suggestedType].Hex}; {(suggestedType.IsEnum ? "font-style: italic" : "normal")};")>@suggestedType.Name</span>
                                    <span class="type-kind">@(suggestedType.IsEnum ? "Enum" : "Token Type")</span>
                                </div>
                            }
                        </div>
                    }
                </div>

                @if (_showPreviewBoxes)
                {
                    <br />
                    <br />

                    <div style="border-top: 1px dashed var(--outline-grey)" />

                    <br />

                    <div style="display: flex; flex-direction: column;">
                        <div class="small-box-label right">Rendered regex</div>
                        <div class="rendered-regex-box">
                            <pre>@_renderedRegex</pre>
                        </div>

                        <br />

                        <div class="small-box-label right">C# class preview</div>
                        <div class="rendered-regex-box">
                            <pre class="c-sharp">@_tokenTemplatePreview.ClassFileStyled</pre>
                        </div>
                    </div>
                }
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
        <button class="btn btn-primary" @onclick="HandleSubmit">Save</button>
    </DialogActions>
</CustomDialog>