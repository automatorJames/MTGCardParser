@inject AggregateCardAnalysis Analysis

@foreach (var part in Leaf.Parts)
{
    @switch (part)
    {
        case NonPropertyTokenLeafPart plainTextPart:
            @plainTextPart.Text
            break;

        case PropertyCaptureTokenLeafPart propCapturePart:
            <span class=@GetClass()
            style=@GetStyle(propCapturePart)
            data-path=@propCapturePart.Path>
                @propCapturePart.Text
            </span>
            break;
    }
}

@code {
    [Parameter, EditorRequired]
    public TokenSegmentLeaf Leaf { get; set; } = default!;

    [Parameter, EditorRequired]
    public PositionalToken ImmediateParentToken { get; set; } = default!;

    string GetClass() => $"prop-capture{(Leaf.IsComplexToken ? " complex" : "")}";

    string GetStyle(PropertyCaptureTokenLeafPart propCapturePart)
    {
        var style = $"--prop-color: {GetPropColor(propCapturePart)}; ";

        //A wee harmless hack to ensure the overline highlights at the same lower Y coord as the closest underline
        var paddingBottom = 8 + (ImmediateParentToken.NestedDepth * 4);

        style += $"padding-bottom: {paddingBottom}px;";

        return style;
    }

    string GetPropColor(PropertyCaptureTokenLeafPart propCapturePart)
    {
        // Make the overline match the color of the parent token type
        if (Leaf.IsComplexToken)
            return ImmediateParentToken.Palette.Hex;

        // Get the positional color
        return propCapturePart.Hex;
    }

}