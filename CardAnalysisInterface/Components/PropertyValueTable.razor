<div class=@GetWrapperCss()>
    <span data-path=@Span.Path
    class="token-type-name"
    style=@Span.Palette.ToColorStyle()>
        @Span.DisplayName
    </span>

    <div class="content-box" data-path=@Span.Path style=@Span.Palette.ToColorStyle(-1))>

        @if (Span.Leaves.Any())
        {
            <table class="property-capture-table" data-path=@Span.Path>
                <thead>
                    <tr><th>Property</th><th>Type</th><th>Value</th></tr>
                </thead>
                <tbody>
                    @foreach (var leaf in Span.Leaves)
                    {
                        <tr>
                            <td data-path=@leaf.Path
                            class="prop-capture-table-cell"
                            style=@leaf.Palette.ToColorStyle()>
                                @leaf.PropertyCapture.RegexPropInfo.RegexPropType
                            </td>

                            <td class="@GetPropertyTypeCss(leaf.PropertyCapture.RegexPropInfo)">
                                @leaf.PropertyCapture.RegexPropInfo.FriendlyTypeName
                            </td>
                            <td>@leaf.PropertyCapture.Value.ToString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @foreach (var branch in Span.Branches)
        {
            <PropertyValueTable Span=@branch />
        }
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public SpanBranch Span { get; set; } = default!;

    string GetWrapperCss()
    {
        var css = "property-table-wrapper";

        if (Span is SpanRoot)
            css += " match-boundary";

        return css;
    }

    string GetPropertyTypeCss(RegexPropInfo regexPropInfo)
    {
        var defaultVal = "value-default";

        if (regexPropInfo.UndistilledProp != null)
            return defaultVal;

        var capturePropType = regexPropInfo.RegexPropType;

        return regexPropInfo.RegexPropType switch
        {
            RegexPropType.Placeholder => "value-tokensegment",
            RegexPropType.Enum => "value-enum",
            _ => defaultVal
        };
    }
}