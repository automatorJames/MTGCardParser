@if (Span.CollapseInAnalysis)
{
    @foreach (var branch in Span.Branches)
    {
        <PropertyValueTable Span=@branch />
    }
}
else
{
    <TokenTypeName TokenType=@Span.TokenType DataPath=@Span.Path />

    @if (Span.LeavesOrDistilled.Any())
    {
        <div class=@GetWrapperCss()>
            <div class="content-box" data-path=@Span.Path style=@Span.Palette.ToColorStyle(-1))>
                <table class="property-capture-table" data-path=@Span.Path>
                    <thead>
                        <tr><th>Property</th><th>Type</th><th>Value</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var leaf in Span.LeavesOrDistilled)
                        {
                            <tr>
                                <td 
                                data-path=@leaf.Path
                                class="prop-capture-table-cell first-column"
                                style=@(leaf.Palette.ToColorStyle() + "font-weight: bold")>
                                    @leaf.PropertyCapture.RegexPropInfo.FriendlyPropName
                                </td>

                                <td 
                                data-path=@leaf.Path
                                class="prop-capture-table-cell type-column"
                                style=@leaf.Palette.ToColorStyle()>
                                    @leaf.PropertyCapture.RegexPropInfo.FriendlyTypeName
                                </td>
                                <td 
                                data-path=@leaf.Path
                                class="prop-capture-table-cell value-column"
                                style=@leaf.Palette.ToColorStyle()>
                                    @FormatValue(leaf.PropertyCapture.Value)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @foreach (var branch in Span.Branches)
                {
                    <PropertyValueTable Span=@branch />
                }
            </div>
        </div>
    }   
}




@code {
    [Parameter, EditorRequired]
    public SpanBranch Span { get; set; } = default!;

    string GetWrapperCss()
    {
        var css = "property-table-wrapper";

        if (Span is SpanRoot)
            css += " match-boundary";

        return css;
    }

    string FormatValue(object value)
    {
        var strVal = value.ToString();
        return strVal.ToFriendlyCase(TitleDisplayOption.Lower);
    }
}