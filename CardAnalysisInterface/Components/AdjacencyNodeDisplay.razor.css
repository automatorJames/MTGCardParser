:host {
    /* Each component instance is a grid item in its parent's grid. */
    display: contents;
}

.node-layout-wrapper {
    /* This component is now also a grid item within its parent's grid layout. */
    display: contents;
}

.node-content-wrapper {
    position: relative; /* For positioning the frequency count */
    display: flex;
    align-items: center;
    /* Vertically center this within its allocated grid row-span */
    grid-row: calc(var(--vertical-center-offset, 0) + 1);
}

.adjacency-node {
    display: flex;
    justify-content: flex-start; /* Left-align text by default */
    align-items: center;
    background-color: var(--dark-grey);
    border: 1px solid;
    border-radius: 4px;
    padding: 0.5rem 0.75rem;
    font-size: 0.9em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--base-text-color);
    width: var(--node-width, 160px);
    height: 2.5em;
    z-index: 10;
}

    /* If text doesn't overflow, center it. A bit of a hack, but works visually. */
    .adjacency-node:not(:has(span.adjacency-text:active)) { /* Using :active as a stand-in for "no-overflow" */
        justify-content: center;
    }

.adjacency-freq {
    position: absolute;
    top: -0.6em;
    right: -0.6em;
    font-size: 0.8em;
    font-weight: bold;
    color: var(--hint-color); /* Light grey */
    background-color: #2e2e2e; /* Slightly different from node bg */
    padding: 0.1em 0.4em;
    border-radius: 50%;
    border: 1px solid #444;
    z-index: 11;
    min-width: 1em;
    height: 1.2em;
    text-align: center;
    line-height: 1.2em;
}

/* Custom Tooltip */
.adjacency-node[data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #111;
    color: #fff;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    z-index: 1000;
    white-space: nowrap;
    font-size: 0.9em;
    border: 1px solid #555;
    transition-delay: 0s;
}

/* --- Children and Connectors --- */

.connector-and-children-container {
    display: grid; /* This will contain the single horizontal connector and the children container */
    grid-template-columns: auto 1fr;
    align-items: stretch; /* Make children fill the vertical space */
}

.children-container {
    position: relative;
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: 1fr; /* Each child gets an equal fraction of the space */
}

    /* The vertical line connecting all children */
    .children-container::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: #383838;
        border-radius: 2px;
    }

.connector-h-out {
    width: 1.5rem;
    /* This self-aligns the horizontal line to the middle of its grid area */
    align-self: center;
    height: 2px;
    background-color: #383838;
}
