@inject AggregateCardAnalysis Analysis

@if (PositionalToken.PropVals.Any())
{
    <table>
        <thead>
            <tr><th>Property</th><th>Type</th><th>Value</th></tr>
        </thead>
        <tbody>
            @foreach (var propVal in PositionalToken.PropVals)
            {
                string valueClass = GetCssClass(propVal.RegexPropInfo);
                <tr 
                style=@($"--highlight-color: {propVal.HexColor};")
                data-path=@propVal.Path>
                    <td><span style=@($"color: {propVal.HexColor}; font-weight: bold;")>@propVal.RegexPropInfo.Name</span></td>
                    <td class=@valueClass>@GetFriendlyTypeName(propVal.RegexPropInfo.UnderlyingType)</td>
                    <td class="@valueClass">@propVal.StringVal</td>
                </tr>
            }
        </tbody>
    </table>
}

@foreach (var child in PositionalToken.ChildTokens)
{
    <div class="property-child-block">
        <h5 
            data-path=@child.Path 
            style=@GetTokenStyle(child)>
            @child.Token.Type.Name
        </h5>
        <TokenUnitDetails PositionalToken=@child />
    </div>
}


@code {
    [Parameter, EditorRequired]
    public PositionalToken PositionalToken { get; set; } = default!;

    string GetTokenStyle(PositionalToken token)
        => $"color: {token.Palette.Hex}; --highlight-color: {token.Palette.Hex};";

    string GetCssClass(RegexPropInfo regexPropInfo)
    {
        var capturePropType = regexPropInfo.RegexPropType;

        return regexPropInfo.RegexPropType switch
        {
            RegexPropType.Placeholder => "value-tokensegment",
            RegexPropType.Enum => "value-enum",
            _ => "value-default"
        };
    }

    string GetFriendlyTypeName(Type type)
    {
        bool isNullableEnum = type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>) && type.GetGenericArguments()[0].IsEnum;
        if (type.IsEnum || isNullableEnum) return "Enum";
        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)) return $"{type.GetGenericArguments()[0].Name}?";
        if (type.IsAssignableTo(typeof(TokenUnit))) return "Token Unit";
        return type.Name;
    }
}