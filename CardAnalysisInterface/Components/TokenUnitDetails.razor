@inject AggregateCardAnalysis Analysis

@if (visibleScalarPropValues.Any())
{
    <table>
        <thead>
            <tr><th>Property</th><th>Type</th><th>Value</th></tr>
        </thead>
        <tbody>
            @{
                var keys = visibleScalarPropValues.Keys.ToList();
            }

            @for (int i = 0; i < visibleScalarPropValues.Count; i++)
            {
                var key = keys[i];
                var value = visibleScalarPropValues[key];
                string propColor = Analysis.PropertyCaptureColors[i % Analysis.PropertyCaptureColors.Count];
                string valueClass = GetCssClass(key);
                <tr data-property-name=@(key.Name) data-capture-id=@(CaptureId)>
                    <td><span style=@($"color: {propColor}; font-weight: bold;")>@key.Name</span></td>
                    <td class="@valueClass">@GetFriendlyTypeName(key.Prop.PropertyType)</td>
                    @if (value == null || (value is string s && string.IsNullOrEmpty(s)))
                    {
                        <td class="value-empty">(empty)</td>
                    }
                    else
                    {
                        <td class="@valueClass">@value.ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@foreach (var childToken in Instance.ChildTokens)
{
    <div class="property-child-block">
        <h5 data-property-name=@(childToken.Type.Name) data-capture-id=@CaptureId style=@($"color: {Analysis.TypeColors[childToken.Type]};")>@childToken.Type.Name</h5>
        <TokenUnitDetails Instance=@childToken CaptureId=@CaptureId />
    </div>
}


@code {
    [Parameter, EditorRequired]
    public ITokenUnit Instance { get; set; } = default!;

    [Parameter, EditorRequired]
    public string CaptureId { get; set; } = default!;

    [Parameter]
    public bool OmitCapturedTextSegmentProperties { get; set; } = true;

    Dictionary<CaptureProp, object?> visibleScalarPropValues = new(new CapturePropComparer());

    protected override void OnInitialized()
    {
        var orderedCaptureProps = Instance.GetRegexTemplate()
            .GetOrderedCaptureProps()
            .ToList();

        foreach (var captureProp in orderedCaptureProps)
        {
            var prop = captureProp.Prop;
            var value = prop.GetValue(Instance);

            if (value == null) continue;
            if (OmitCapturedTextSegmentProperties && prop.PropertyType == typeof(CapturedTextSegment)) continue;
            if (prop.PropertyType.IsValueType && value.Equals(Activator.CreateInstance(prop.PropertyType))) continue;

            visibleScalarPropValues[captureProp] = value;
        }
    }

    public string GetCssClass(CaptureProp captureProp)
    {
        var capturePropType = captureProp.CapturePropType;

        return captureProp.CapturePropType switch
        {
            CapturePropType.CapturedTextSegment => "value-tokensegment",
            CapturePropType.Enum => "value-enum",
            _ => "value-default"
        };
    }

    public string GetFriendlyTypeName(Type type)
    {
        bool isNullableEnum = type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>) && type.GetGenericArguments()[0].IsEnum;
        if (type.IsEnum || isNullableEnum) return "Enum";
        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)) return $"{type.GetGenericArguments()[0].Name}?";
        return type.Name;
    }
}