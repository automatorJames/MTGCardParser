@inject IDialogService DialogService

<div class="card-capture-block">
    <blocktitle>@CardDigest.Card.Name</blocktitle>
    <br />
    <br />
    <pre class="full-original-text">@CardDigest.Card.Text</pre>

    @foreach (var line in CardDigest.Lines)
    {
        _capitalizeNextSpan = true;
        <div class="line-capture-block match-boundary">
            <div class="line-label">Line #@(line.LineIndex + 1)</div>

            <pre class="line-text">
                @foreach (var root in line.SpanRoots)
                {
                    @if (root.AttachedPrecedingText != null)
                    {
                        <precedingtext>@root.AttachedPrecedingText</precedingtext>
                    }

                    <NestedSpanRecursive Span=@root Capitalize=@_capitalizeNextSpan />
                    _capitalizeNextSpan = false;

                    @if (root.AttachedFollowingText != null)
                    {
                        <followingtext>@root.AttachedFollowingText</followingtext>

                        if (_terminals.Contains(root.AttachedFollowingText))
                        {
                            <br />
                            _capitalizeNextSpan = true;
                        }
                    }
                }
            </pre>

            @foreach (var root in line.SpanRoots.Where(x => !x.IgnoreInAnalysis))
            {
                <PropertyValueTable Span=@root />
            }
        </div>
    }
</div>

@code {
    bool _capitalizeNextSpan;

    [Parameter]
    public CardDigest CardDigest { get; set; }

    static HashSet<string> _terminals = [".", ";", ".\"", ";\""];

    async Task OpenRegexEditorDialog(CardLine line)
    {
        var dialogParams = new DialogParameters<RegexEditorDialog>
        {
            { x => x.Line, line }
        };

        var dialog = await DialogService.ShowAsync<RegexEditorDialog>("", dialogParams);
    }
}
