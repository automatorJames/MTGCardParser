<div class="card-capture-block">
    <div class="card-title">@CardDigest.Card.Name</div>
    <pre class="full-original-text">@CardDigest.Card.Text</pre>

    @foreach (var line in CardDigest.Lines)
    {
        _capitalizeNextSpan = true;
        <div class="line-capture-block match-boundary">
            <div class="line-label dashed-border">Line #@(line.LineIndex + 1)</div>

            <pre class="line-text" @onclick=@(() => OpenRegexEditorDialog(line))>
                @foreach (var root in line.SpanRoots)
                {
                    @if (root.AttachedPrecedingText != null)
                    {
                        <precedingtext>@root.AttachedPrecedingText</precedingtext>
                    }

                    <NestedSpanRecursive Span=@root Capitalize=@_capitalizeNextSpan />
                    _capitalizeNextSpan = false;

                    @if (root.AttachedFollowingText != null)
                    {
                        <followingtext>@root.AttachedFollowingText</followingtext>

                        if (_terminals.Contains(root.AttachedFollowingText))
                        {
                            <br />
                            _capitalizeNextSpan = true;
                        }
                    }
                }
            </pre>

            @foreach (var root in line.SpanRoots.Where(x => !x.IgnoreInAnalysis))
            {
                <PropertyValueTable Span=@root />
            }
        </div>
    }
</div>

@if (_isDialogOpen)
{
    <RegexEditorDialog Line="_selectedLine" OnClose="HandleDialogClose" />
}

@code {
    bool _capitalizeNextSpan;
    bool _isDialogOpen = false;
    CardLine _selectedLine;

    [Parameter]
    public CardDigest CardDigest { get; set; }

    static HashSet<string> _terminals = [".", ";", ".\"", ";\""];

    private void OpenRegexEditorDialog(CardLine line)
    {
        _selectedLine = line;
        _isDialogOpen = true;
        // We call StateHasChanged() to ensure the UI re-renders and shows the dialog.
        StateHasChanged();
    }

    private void HandleDialogClose(string regexResult)
    {
        _isDialogOpen = false; // Hide the dialog

        if (regexResult != null) // Check if the user clicked "Save"
        {
            Console.WriteLine($"User saved new regex: {regexResult}");
            //
            // --> This is where you put your logic to process the new regex.
            //
        }
        else
        {
            Console.WriteLine("Dialog was cancelled.");
        }

        // We need to re-render to hide the dialog.
        StateHasChanged();
    }
}
