@inject AggregateCardAnalysis Analysis

@if (PositionalToken.IgnoreInAnalysis)
{
    @PositionalToken.Token.MatchSpan.ToStringValue()
}
else
{
    var deepestLevel = PositionalToken.Token.GetDeepestChildLevel();

    <span class="nested-underline" style=@($"--underline-color: {PositionalToken.Palette.Hex};") data-path=@PositionalToken.Path>
        @foreach (var segment in PositionalToken.Segments)
        {
            @switch (segment)
            {
                case TokenSegmentLeaf tokenSegmentLeaf:
                    <CaptureLeaf Leaf=@tokenSegmentLeaf ImmediateParentToken=@PositionalToken />
                    break;

                case TokenSegmentBranch tokenSegmentBranch:
                    <NestedTokenSpan PositionalToken=@tokenSegmentBranch.ChildToken />
                    break;
            }
        }
    </span>
}

@code {
    [Parameter, EditorRequired]
    public PositionalToken PositionalToken { get; set; } = default!;

    [Parameter]
    public string AncestorIds { get; set; } = "";
}