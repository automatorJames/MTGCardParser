@inject AggregateCardAnalysis Analysis

@if (PositionalToken.IgnoreInAnalysis)
{
    @PositionalToken.Token.MatchSpan.ToStringValue()
}
else
{
    var deepestLevel = PositionalToken.Token.GetDeepestChildLevel();

    if (PositionalToken.IsTransparentInAnalysisDisplay)
    {
        <span class="nested-underline eat-my-shite-willy" style=@PositionalToken.Palette.ToColorStyle() data-path=@PositionalToken.Path>
            @foreach (var segment in PositionalToken.Segments)
            {
                if (segment is TokenSegmentLeaf tokenSegmentLeaf)
                {
                    <CaptureLeaf Leaf=@tokenSegmentLeaf ImmediateParentToken=@PositionalToken />
                }
            }


            @foreach (var grandchild in PositionalToken.ChildTokens)
            {
                @foreach (var segment in grandchild.Segments)
                {
                    if (segment is TokenSegmentLeaf tokenSegmentLeaf)
                    {
                        <CaptureLeaf Leaf=@tokenSegmentLeaf ImmediateParentToken=@PositionalToken />
                    }
                    else if (segment is TokenSegmentBranch tokenSegmentBranch)
                    {
                        <NestedTokenSpan PositionalToken=@tokenSegmentBranch.ChildToken />
                    }
                }
            }
        </span>
    }
    else
    {
        <span class="nested-underline" style=@PositionalToken.Palette.ToColorStyle() data-path=@PositionalToken.Path>
            @foreach (var segment in PositionalToken.Segments)
            {
                if (segment is TokenSegmentLeaf tokenSegmentLeaf)
                {
                    <CaptureLeaf Leaf=@tokenSegmentLeaf ImmediateParentToken=@PositionalToken />
                }
                else if (segment is TokenSegmentBranch tokenSegmentBranch)
                {
                    <NestedTokenSpan PositionalToken=@tokenSegmentBranch.ChildToken />
                }
            }
        </span>
    }
}

@code {
    [Parameter, EditorRequired]
    public PositionalToken PositionalToken { get; set; } = default!;

    [Parameter]
    public string AncestorIds { get; set; } = "";
}